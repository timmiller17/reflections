What happens when you initialize a repository?  Why do you need to do it?

	When you initialize a repository, a .git folder is created and the master
	 branch is also created.  No commits are created initially (you couldn't
	  create a commit message if this just happened on git init).
	You need to initialize a repository as a first step to putting a project 
	under git's version control.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

	The staging area is a stopover point between the working directory and the 
	respository.  It's an area you can assemble the collection of files you want 
	to add from the working directory to the repository (to place them under 
	version control).  It is valuable to help you visualize what files you are 
	about to add to the repository.

How can you use the staging area to make sure you have one commit per logical 
change?

	<git diff> command will show delta between working directory and staging area
	<git diff --staged> command will show delta between staging area and most 
	recent commit

	<git status> shows the files that have changed and aren't in the staging 
	area as well as the files that are staged and ready to be committed.

	I can use these commands to see what changes I've made and doublecheck that 
	these are the group of changes I want to be present in my commit.

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

	Branches are a way to let you "branch" off and try an experimental feature 
	or a rewrite (optimization?) of an existing feature.  They could also be 
	used to test an alternate version of your code.  They let you keep track of 
	multiple versions without fear of losing your master branch.

How do the diagrams help you visualize the branch structure?

	Diagrams show where branches diverged, which commits are parents of which 
	other commits, and which commits are currently unreachable.  Having a 
	diagram helps keep the logic straight in your head.
	
What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

	Merging two branches together results (if successful) in one branch (with 
	the same branch name as the one that was checked out when the merge was 
	performed).  It has all of the commits of two branches.  Commits that 
	occured in the separate branches (from after the common parent when they 
	split) are listed in git log output by order of time stamp.  This may mean 
	that two consecutive commits in the log are not a parent/child pair.  You 
	can use <git show _commit-id_> to show the diff between a commit and its 
	parent.  The diagram <git log --graph --oneline> is a handy way to visualize 
	what has occurred.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?	
	
	Automatic merges save time and are generally ok to do  (as far as I can do) 
	because the algorithm is pretty cautious.  I suppose sometimes something 
	goes wrong and then you probably wish it hadn't automatically merged.  A 
	manual merge will be a bit more time-consuming (especially for many changes) 
	but you will have full knowledge of what is going on as it happens.  Git's 
	version seems to give the best of both worlds (assuming it all works) 
	because the easy stuff is taken care of and you only have to work through 
	the hard stuff that is the most critical to be on top of anyway.
